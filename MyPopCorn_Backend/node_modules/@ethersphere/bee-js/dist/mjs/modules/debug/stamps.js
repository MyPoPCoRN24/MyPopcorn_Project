import { http } from "../../utils/http.js";
const STAMPS_ENDPOINT = 'stamps';
const BATCHES_ENDPOINT = 'batches';
export async function getGlobalPostageBatches(requestOptions) {
  const response = await http(requestOptions, {
    method: 'get',
    url: `${BATCHES_ENDPOINT}`,
    responseType: 'json'
  });
  return response.data.stamps;
}
export async function getAllPostageBatches(requestOptions) {
  const response = await http(requestOptions, {
    method: 'get',
    url: `${STAMPS_ENDPOINT}`,
    responseType: 'json'
  });
  return response.data.stamps;
}
export async function getPostageBatch(requestOptions, postageBatchId) {
  const response = await http(requestOptions, {
    method: 'get',
    url: `${STAMPS_ENDPOINT}/${postageBatchId}`,
    responseType: 'json'
  });
  return response.data;
}
export async function getPostageBatchBuckets(requestOptions, postageBatchId) {
  const response = await http(requestOptions, {
    method: 'get',
    url: `${STAMPS_ENDPOINT}/${postageBatchId}/buckets`,
    responseType: 'json'
  });
  return response.data;
}
export async function createPostageBatch(requestOptions, amount, depth, options) {
  const headers = {};
  if (options?.gasPrice) {
    headers['gas-price'] = options.gasPrice.toString();
  }
  if (options?.immutableFlag !== undefined) {
    headers.immutable = String(options.immutableFlag);
  }
  const response = await http(requestOptions, {
    method: 'post',
    url: `${STAMPS_ENDPOINT}/${amount}/${depth}`,
    responseType: 'json',
    params: {
      label: options?.label
    },
    headers
  });
  return response.data.batchID;
}
export async function topUpBatch(requestOptions, id, amount) {
  const response = await http(requestOptions, {
    method: 'patch',
    url: `${STAMPS_ENDPOINT}/topup/${id}/${amount}`,
    responseType: 'json'
  });
  return response.data.batchID;
}
export async function diluteBatch(requestOptions, id, depth) {
  const response = await http(requestOptions, {
    method: 'patch',
    url: `${STAMPS_ENDPOINT}/dilute/${id}/${depth}`,
    responseType: 'json'
  });
  return response.data.batchID;
}