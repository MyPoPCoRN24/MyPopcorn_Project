import { wrapBytesWithHelpers } from "../utils/bytes.js";
import { extractUploadHeaders } from "../utils/headers.js";
import { http } from "../utils/http.js";
const endpoint = 'chunks';
/**
 * Upload chunk to a Bee node
 *
 * The chunk data consists of 8 byte span and up to 4096 bytes of payload data.
 * The span stores the length of the payload in uint64 little endian encoding.
 * Upload expects the chuck data to be set accordingly.
 *
 * @param requestOptions Options for making requests
 * @param data    Chunk data to be uploaded
 * @param postageBatchId  Postage BatchId that will be assigned to uploaded data
 * @param options Additional options like tag, encryption, pinning
 */
export async function upload(requestOptions, data, postageBatchId, options) {
  const response = await http(requestOptions, {
    method: 'post',
    url: `${endpoint}`,
    data,
    headers: {
      'content-type': 'application/octet-stream',
      ...extractUploadHeaders(postageBatchId, options)
    },
    responseType: 'json'
  });
  return response.data.reference;
}
/**
 * Download chunk data as a byte array
 *
 * @param requestOptions Options for making requests
 * @param hash Bee content reference
 *
 */
export async function download(requestOptions, hash) {
  const response = await http(requestOptions, {
    responseType: 'arraybuffer',
    url: `${endpoint}/${hash}`
  });
  return wrapBytesWithHelpers(new Uint8Array(response.data));
}