import { wrapBytesWithHelpers } from "../utils/bytes.js";
import { extractDownloadHeaders, extractRedundantUploadHeaders } from "../utils/headers.js";
import { http } from "../utils/http.js";
import { makeTagUid } from "../utils/type.js";
const endpoint = 'bytes';
/**
 * Upload data to a Bee node
 *
 * @param requestOptions Options for making requests
 * @param data            Data to be uploaded
 * @param postageBatchId  Postage BatchId that will be assigned to uploaded data
 * @param options         Additional options like tag, encryption, pinning
 */
export async function upload(requestOptions, data, postageBatchId, options) {
  const response = await http(requestOptions, {
    url: endpoint,
    method: 'post',
    responseType: 'json',
    data,
    headers: {
      'content-type': 'application/octet-stream',
      ...extractRedundantUploadHeaders(postageBatchId, options)
    }
  });
  return {
    reference: response.data.reference,
    tagUid: response.headers['swarm-tag'] ? makeTagUid(response.headers['swarm-tag']) : undefined
  };
}
/**
 * Download data as a byte array
 *
 * @param requestOptions Options for making requests
 * @param hash Bee content reference
 */
export async function download(requestOptions, hash, options) {
  const response = await http(requestOptions, {
    responseType: 'arraybuffer',
    url: `${endpoint}/${hash}`,
    headers: extractDownloadHeaders(options)
  });
  return wrapBytesWithHelpers(new Uint8Array(response.data));
}
/**
 * Download data as a readable stream
 *
 * @param requestOptions Options for making requests
 * @param hash Bee content reference
 */
export async function downloadReadable(requestOptions, hash, options) {
  const response = await http(requestOptions, {
    responseType: 'stream',
    url: `${endpoint}/${hash}`,
    headers: extractDownloadHeaders(options)
  });
  return response.data;
}