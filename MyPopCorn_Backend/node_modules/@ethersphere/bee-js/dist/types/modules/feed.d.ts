import { Index } from '../feed';
import { FeedType } from '../feed/type';
import { BatchId, BeeRequestOptions, Reference, ReferenceResponse, Topic } from '../types';
import { HexEthAddress } from '../utils/eth';
export interface CreateFeedOptions {
    type?: FeedType;
}
export interface FeedUpdateOptions {
    /**
     * Specifies the start date as unix time stamp
     */
    at?: number;
    type?: FeedType;
    /**
     * Fetch specific previous Feed's update (default fetches latest update)
     */
    index?: Index;
}
interface FeedUpdateHeaders {
    /**
     * The current feed's index
     */
    feedIndex: Index;
    /**
     * The feed's index for next update.
     * Only set for the latest update. If update is fetched using previous index, then this is an empty string.
     */
    feedIndexNext: string;
}
export interface FetchFeedUpdateResponse extends ReferenceResponse, FeedUpdateHeaders {
}
/**
 * Create an initial feed root manifest
 *
 * @param requestOptions  Options for making requests
 * @param owner           Owner's ethereum address in hex
 * @param topic           Topic in hex
 * @param postageBatchId  Postage BatchId to be used to create the Feed Manifest
 * @param options         Additional options, like type (default: 'sequence')
 */
export declare function createFeedManifest(requestOptions: BeeRequestOptions, owner: HexEthAddress, topic: Topic, postageBatchId: BatchId): Promise<Reference>;
/**
 * Find and retrieve feed update
 *
 * The feed consists of updates. This endpoint looks up an
 * update that matches the provided parameters and returns
 * the reference it contains along with its index and the
 * index of the subsequent update.
 *
 * @param requestOptions Options for making requests
 * @param owner          Owner's ethereum address in hex
 * @param topic          Topic in hex
 * @param options        Additional options, like index, at, type
 */
export declare function fetchLatestFeedUpdate(requestOptions: BeeRequestOptions, owner: HexEthAddress, topic: Topic, options?: FeedUpdateOptions): Promise<FetchFeedUpdateResponse>;
export {};
