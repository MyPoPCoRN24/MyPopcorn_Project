"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDownloadHeaders = exports.extractRedundantUploadHeaders = exports.extractUploadHeaders = exports.readFileHeaders = void 0;
const error_1 = require("./error");
/**
 * Read the filename from the content-disposition header
 * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
 *
 * @param header the content-disposition header value
 *
 * @returns the filename
 */
function readContentDispositionFilename(header) {
    if (!header) {
        throw new error_1.BeeError('missing content-disposition header');
    }
    // Regex was found here
    // https://stackoverflow.com/questions/23054475/javascript-regex-for-extracting-filename-from-content-disposition-header
    const dispositionMatch = header.match(/filename\*?=['"]?(?:UTF-\d['"]*)?([^;\r\n"']*)['"]?;?/i);
    if (dispositionMatch && dispositionMatch.length > 0) {
        return dispositionMatch[1];
    }
    throw new error_1.BeeError('invalid content-disposition header');
}
function readTagUid(header) {
    if (!header) {
        return undefined;
    }
    return parseInt(header, 10);
}
function readFileHeaders(headers) {
    const name = readContentDispositionFilename(headers['content-disposition']);
    const tagUid = readTagUid(headers['swarm-tag-uid']);
    const contentType = headers['content-type'] || undefined;
    return {
        name,
        tagUid,
        contentType,
    };
}
exports.readFileHeaders = readFileHeaders;
function extractUploadHeaders(postageBatchId, options) {
    if (!postageBatchId) {
        throw new error_1.BeeError('Postage BatchID has to be specified!');
    }
    const headers = {
        'swarm-postage-batch-id': postageBatchId,
    };
    if (options?.pin) {
        headers['swarm-pin'] = String(options.pin);
    }
    if (options?.encrypt) {
        headers['swarm-encrypt'] = String(options.encrypt);
    }
    if (options?.tag) {
        headers['swarm-tag'] = String(options.tag);
    }
    if (typeof options?.deferred === 'boolean') {
        headers['swarm-deferred-upload'] = options.deferred.toString();
    }
    return headers;
}
exports.extractUploadHeaders = extractUploadHeaders;
function extractRedundantUploadHeaders(postageBatchId, options) {
    const headers = extractUploadHeaders(postageBatchId, options);
    if (options?.redundancyLevel) {
        headers['swarm-redundancy-level'] = String(options.redundancyLevel);
    }
    return headers;
}
exports.extractRedundantUploadHeaders = extractRedundantUploadHeaders;
function extractDownloadHeaders(options) {
    const headers = {};
    if (options?.redundancyStrategy) {
        headers['swarm-redundancy-strategy'] = String(options.redundancyStrategy);
    }
    if (options?.fallback === false) {
        headers['swarm-redundancy-fallback-mode'] = 'false';
    }
    if (options?.timeoutMs !== undefined) {
        headers['swarm-chunk-retrieval-timeout'] = String(options.timeoutMs);
    }
    return headers;
}
exports.extractDownloadHeaders = extractDownloadHeaders;
