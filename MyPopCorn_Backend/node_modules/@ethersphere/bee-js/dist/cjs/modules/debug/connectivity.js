"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pingPeer = exports.getTopology = exports.removePeer = exports.getBlocklist = exports.getPeers = exports.getNodeAddresses = void 0;
const http_1 = require("../../utils/http");
async function getNodeAddresses(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: 'addresses',
        responseType: 'json',
    });
    return response.data;
}
exports.getNodeAddresses = getNodeAddresses;
async function getPeers(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: 'peers',
        responseType: 'json',
    });
    return response.data.peers;
}
exports.getPeers = getPeers;
async function getBlocklist(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: 'blocklist',
        responseType: 'json',
    });
    return response.data.peers;
}
exports.getBlocklist = getBlocklist;
async function removePeer(requestOptions, peer) {
    const response = await (0, http_1.http)(requestOptions, {
        url: `peers/${peer}`,
        responseType: 'json',
        method: 'DELETE',
    });
    return response.data;
}
exports.removePeer = removePeer;
async function getTopology(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: `topology`,
        responseType: 'json',
    });
    return response.data;
}
exports.getTopology = getTopology;
async function pingPeer(requestOptions, peer) {
    const response = await (0, http_1.http)(requestOptions, {
        url: `pingpong/${peer}`,
        responseType: 'json',
        method: 'POST',
    });
    return response.data;
}
exports.pingPeer = pingPeer;
