"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diluteBatch = exports.topUpBatch = exports.createPostageBatch = exports.getPostageBatchBuckets = exports.getPostageBatch = exports.getAllPostageBatches = exports.getGlobalPostageBatches = void 0;
const http_1 = require("../../utils/http");
const STAMPS_ENDPOINT = 'stamps';
const BATCHES_ENDPOINT = 'batches';
async function getGlobalPostageBatches(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: `${BATCHES_ENDPOINT}`,
        responseType: 'json',
    });
    return response.data.stamps;
}
exports.getGlobalPostageBatches = getGlobalPostageBatches;
async function getAllPostageBatches(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: `${STAMPS_ENDPOINT}`,
        responseType: 'json',
    });
    return response.data.stamps;
}
exports.getAllPostageBatches = getAllPostageBatches;
async function getPostageBatch(requestOptions, postageBatchId) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: `${STAMPS_ENDPOINT}/${postageBatchId}`,
        responseType: 'json',
    });
    return response.data;
}
exports.getPostageBatch = getPostageBatch;
async function getPostageBatchBuckets(requestOptions, postageBatchId) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: `${STAMPS_ENDPOINT}/${postageBatchId}/buckets`,
        responseType: 'json',
    });
    return response.data;
}
exports.getPostageBatchBuckets = getPostageBatchBuckets;
async function createPostageBatch(requestOptions, amount, depth, options) {
    const headers = {};
    if (options?.gasPrice) {
        headers['gas-price'] = options.gasPrice.toString();
    }
    if (options?.immutableFlag !== undefined) {
        headers.immutable = String(options.immutableFlag);
    }
    const response = await (0, http_1.http)(requestOptions, {
        method: 'post',
        url: `${STAMPS_ENDPOINT}/${amount}/${depth}`,
        responseType: 'json',
        params: { label: options?.label },
        headers,
    });
    return response.data.batchID;
}
exports.createPostageBatch = createPostageBatch;
async function topUpBatch(requestOptions, id, amount) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'patch',
        url: `${STAMPS_ENDPOINT}/topup/${id}/${amount}`,
        responseType: 'json',
    });
    return response.data.batchID;
}
exports.topUpBatch = topUpBatch;
async function diluteBatch(requestOptions, id, depth) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'patch',
        url: `${STAMPS_ENDPOINT}/dilute/${id}/${depth}`,
        responseType: 'json',
    });
    return response.data.batchID;
}
exports.diluteBatch = diluteBatch;
