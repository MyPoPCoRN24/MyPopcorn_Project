"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPastDueConsumptionPeerBalance = exports.getPastDueConsumptionBalances = exports.getPeerBalance = exports.getAllBalances = void 0;
const http_1 = require("../../utils/http");
const balancesEndpoint = 'balances';
const consumedEndpoint = 'consumed';
/**
 * Get the balances with all known peers including prepaid services
 *
 * @param requestOptions Options for making requests
 */
async function getAllBalances(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: balancesEndpoint,
        responseType: 'json',
    });
    return response.data;
}
exports.getAllBalances = getAllBalances;
/**
 * Get the balances with a specific peer including prepaid services
 *
 * @param requestOptions Options for making requests
 * @param address Swarm address of peer
 */
async function getPeerBalance(requestOptions, address) {
    const response = await (0, http_1.http)(requestOptions, {
        url: `${balancesEndpoint}/${address}`,
        responseType: 'json',
    });
    return response.data;
}
exports.getPeerBalance = getPeerBalance;
/**
 * Get the past due consumption balances with all known peers
 *
 * @param requestOptions Options for making requests
 */
async function getPastDueConsumptionBalances(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: consumedEndpoint,
        responseType: 'json',
    });
    return response.data;
}
exports.getPastDueConsumptionBalances = getPastDueConsumptionBalances;
/**
 * Get the past due consumption balance with a specific peer
 *
 * @param requestOptions Options for making requests
 * @param address Swarm address of peer
 */
async function getPastDueConsumptionPeerBalance(requestOptions, address) {
    const response = await (0, http_1.http)(requestOptions, {
        url: `${consumedEndpoint}/${address}`,
        responseType: 'json',
    });
    return response.data;
}
exports.getPastDueConsumptionPeerBalance = getPastDueConsumptionPeerBalance;
