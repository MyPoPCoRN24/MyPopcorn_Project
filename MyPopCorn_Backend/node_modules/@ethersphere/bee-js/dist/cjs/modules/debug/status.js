"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersions = exports.isSupportedApiVersion = exports.isSupportedMainApiVersion = exports.isSupportedExactVersion = exports.isSupportedVersion = exports.getNodeInfo = exports.getReadiness = exports.getHealth = exports.getDebugStatus = exports.SUPPORTED_BEE_VERSION = exports.SUPPORTED_DEBUG_API_VERSION = exports.SUPPORTED_API_VERSION = exports.SUPPORTED_BEE_VERSION_EXACT = void 0;
const major_js_1 = __importDefault(require("semver/functions/major.js"));
const http_1 = require("../../utils/http");
// Following lines bellow are automatically updated with GitHub Action when Bee version is updated
// so if you are changing anything about them change the `update_bee` action accordingly!
exports.SUPPORTED_BEE_VERSION_EXACT = '1.18.2-759f56f';
exports.SUPPORTED_API_VERSION = '4.0.0';
exports.SUPPORTED_DEBUG_API_VERSION = '4.0.0';
exports.SUPPORTED_BEE_VERSION = exports.SUPPORTED_BEE_VERSION_EXACT.split('-')[0];
const NODE_INFO_URL = 'node';
const STATUS_URL = 'status';
const HEALTH_URL = 'health';
const READINESS_URL = 'readiness';
async function getDebugStatus(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: STATUS_URL,
        responseType: 'json',
    });
    return response.data;
}
exports.getDebugStatus = getDebugStatus;
/**
 * Get health of node
 *
 * @param requestOptions Options for making requests
 */
async function getHealth(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: HEALTH_URL,
        responseType: 'json',
    });
    return response.data;
}
exports.getHealth = getHealth;
/**
 * Get readiness of node
 *
 * @param requestOptions Options for making requests
 */
async function getReadiness(requestOptions) {
    try {
        const response = await (0, http_1.http)(requestOptions, {
            method: 'get',
            url: READINESS_URL,
        });
        return response.status === 200;
    }
    catch {
        return false;
    }
}
exports.getReadiness = getReadiness;
/**
 * Get information about Bee node
 *
 * @param requestOptions Options for making requests
 */
async function getNodeInfo(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        url: NODE_INFO_URL,
        responseType: 'json',
    });
    return response.data;
}
exports.getNodeInfo = getNodeInfo;
/**
 * Connects to a node and checks if it is a supported Bee version by the bee-js
 *
 * @param requestOptions Options for making requests
 * @returns true if the Bee node version is supported
 * @deprecated Use `isSupportedExactVersion` instead
 */
// TODO: Remove on break
async function isSupportedVersion(requestOptions) {
    return isSupportedExactVersion(requestOptions);
}
exports.isSupportedVersion = isSupportedVersion;
/**
 * Connects to a node and checks if its version matches with the one that bee-js supports.
 *
 * Be aware that this is the most strict version check and most probably
 * you will want to use more relaxed API-versions based checks like
 * `isSupportedApiVersion`, `isSupportedMainApiVersion` or `isSupportedDebugApiVersion`
 * based on your use-case.
 *
 * @param requestOptions Options for making requests
 */
async function isSupportedExactVersion(requestOptions) {
    const { version } = await getHealth(requestOptions);
    return version === exports.SUPPORTED_BEE_VERSION_EXACT;
}
exports.isSupportedExactVersion = isSupportedExactVersion;
/**
 * Connects to a node and checks if its main's API version matches with the one that bee-js supports.
 *
 * This is useful if you are not using `Bee` class (for anything else then this check)
 * and want to make sure about compatibility.
 *
 * @param requestOptions Options for making requests
 */
async function isSupportedMainApiVersion(requestOptions) {
    const { apiVersion } = await getHealth(requestOptions);
    return (0, major_js_1.default)(apiVersion) === (0, major_js_1.default)(exports.SUPPORTED_API_VERSION);
}
exports.isSupportedMainApiVersion = isSupportedMainApiVersion;
/**
 * Connects to a node and checks if its Main API versions matches with the one that bee-js supports.
 *
 * This should be the main way how to check compatibility for your app and Bee node.
 *
 * @param requestOptions Options for making requests
 */
async function isSupportedApiVersion(requestOptions) {
    const { apiVersion } = await getHealth(requestOptions);
    return (0, major_js_1.default)(apiVersion) === (0, major_js_1.default)(exports.SUPPORTED_API_VERSION);
}
exports.isSupportedApiVersion = isSupportedApiVersion;
/**
 * Returns object with all versions specified by the connected Bee node (properties prefixed with `bee*`)
 * and versions that bee-js supports (properties prefixed with `supported*`).
 *
 * @param requestOptions Options for making requests
 */
async function getVersions(requestOptions) {
    const { version, apiVersion } = await getHealth(requestOptions);
    return {
        supportedBeeVersion: exports.SUPPORTED_BEE_VERSION_EXACT,
        supportedBeeApiVersion: exports.SUPPORTED_API_VERSION,
        beeVersion: version,
        beeApiVersion: apiVersion,
    };
}
exports.getVersions = getVersions;
