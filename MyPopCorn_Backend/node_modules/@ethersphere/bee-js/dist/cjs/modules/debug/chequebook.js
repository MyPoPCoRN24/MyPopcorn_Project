"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawTokens = exports.depositTokens = exports.getLastCheques = exports.getLastChequesForPeer = exports.cashoutLastCheque = exports.getLastCashoutAction = exports.getChequebookBalance = exports.getChequebookAddress = void 0;
const http_1 = require("../../utils/http");
const chequebookEndpoint = 'chequebook';
/**
 * Get the address of the chequebook contract used
 *
 * @param requestOptions Options for making requests
 */
async function getChequebookAddress(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: chequebookEndpoint + '/address',
        responseType: 'json',
    });
    return response.data;
}
exports.getChequebookAddress = getChequebookAddress;
/**
 * Get the balance of the chequebook
 *
 * @param requestOptions Options for making requests
 */
async function getChequebookBalance(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: chequebookEndpoint + '/balance',
        responseType: 'json',
    });
    return response.data;
}
exports.getChequebookBalance = getChequebookBalance;
/**
 * Get last cashout action for the peer
 *
 * @param requestOptions Options for making requests
 * @param peer  Swarm address of peer
 */
async function getLastCashoutAction(requestOptions, peer) {
    const response = await (0, http_1.http)(requestOptions, {
        url: chequebookEndpoint + `/cashout/${peer}`,
        responseType: 'json',
    });
    return response.data;
}
exports.getLastCashoutAction = getLastCashoutAction;
/**
 * Cashout the last cheque for the peer
 *
 * @param requestOptions Options for making requests
 * @param peer  Swarm address of peer
 * @param options
 */
async function cashoutLastCheque(requestOptions, peer, options) {
    const headers = {};
    if (options?.gasPrice) {
        headers['gas-price'] = options.gasPrice.toString();
    }
    if (options?.gasLimit) {
        headers['gas-limit'] = options.gasLimit.toString();
    }
    const response = await (0, http_1.http)(requestOptions, {
        method: 'post',
        url: chequebookEndpoint + `/cashout/${peer}`,
        responseType: 'json',
        headers,
    });
    return response.data.transactionHash;
}
exports.cashoutLastCheque = cashoutLastCheque;
/**
 * Get last cheques for the peer
 *
 * @param requestOptions Options for making requests
 * @param peer  Swarm address of peer
 */
async function getLastChequesForPeer(requestOptions, peer) {
    const response = await (0, http_1.http)(requestOptions, {
        url: chequebookEndpoint + `/cheque/${peer}`,
        responseType: 'json',
    });
    return response.data;
}
exports.getLastChequesForPeer = getLastChequesForPeer;
/**
 * Get last cheques for all peers
 *
 * @param requestOptions Options for making requests
 */
async function getLastCheques(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        url: chequebookEndpoint + '/cheque',
        responseType: 'json',
    });
    return response.data;
}
exports.getLastCheques = getLastCheques;
/**
 * Deposit tokens from overlay address into chequebook
 *
 * @param requestOptions Options for making requests
 * @param amount   Amount of tokens to deposit
 * @param gasPrice Gas Price in WEI for the transaction call
 * @return string  Hash of the transaction
 */
async function depositTokens(requestOptions, amount, gasPrice) {
    const headers = {};
    if (gasPrice) {
        headers['gas-price'] = gasPrice.toString();
    }
    const response = await (0, http_1.http)(requestOptions, {
        method: 'post',
        url: chequebookEndpoint + '/deposit',
        responseType: 'json',
        params: { amount: amount.toString(10) },
        headers,
    });
    return response.data.transactionHash;
}
exports.depositTokens = depositTokens;
/**
 * Withdraw tokens from the chequebook to the overlay address
 *
 * @param requestOptions Options for making requests
 * @param amount   Amount of tokens to withdraw
 * @param gasPrice Gas Price in WEI for the transaction call
 * @return string  Hash of the transaction
 */
async function withdrawTokens(requestOptions, amount, gasPrice) {
    const headers = {};
    if (gasPrice) {
        headers['gas-price'] = gasPrice.toString();
    }
    const response = await (0, http_1.http)(requestOptions, {
        method: 'post',
        url: chequebookEndpoint + '/withdraw',
        responseType: 'json',
        params: { amount: amount.toString(10) },
        headers,
    });
    return response.data.transactionHash;
}
exports.withdrawTokens = withdrawTokens;
