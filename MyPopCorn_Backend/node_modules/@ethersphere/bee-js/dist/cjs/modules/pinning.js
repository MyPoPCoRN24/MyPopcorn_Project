"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllPins = exports.getPin = exports.unpin = exports.pin = void 0;
const http_1 = require("../utils/http");
const PINNING_ENDPOINT = 'pins';
/**
 * Pin data with given reference
 *
 * @param requestOptions Options for making requests
 * @param reference Bee data reference
 */
async function pin(requestOptions, reference) {
    await (0, http_1.http)(requestOptions, {
        method: 'post',
        responseType: 'json',
        url: `${PINNING_ENDPOINT}/${reference}`,
    });
}
exports.pin = pin;
/**
 * Unpin data with given reference
 *
 * @param requestOptions Options for making requests
 * @param reference Bee data reference
 */
async function unpin(requestOptions, reference) {
    await (0, http_1.http)(requestOptions, {
        method: 'delete',
        responseType: 'json',
        url: `${PINNING_ENDPOINT}/${reference}`,
    });
}
exports.unpin = unpin;
/**
 * Get pin status for specific address.
 *
 * @param requestOptions Options for making requests
 * @param reference
 * @throws Error if given address is not pinned
 */
async function getPin(requestOptions, reference) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        responseType: 'json',
        url: `${PINNING_ENDPOINT}/${reference}`,
    });
    return response.data;
}
exports.getPin = getPin;
/**
 * Get list of all pins
 *
 * @param requestOptions Options for making requests
 */
async function getAllPins(requestOptions) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'get',
        responseType: 'json',
        url: `${PINNING_ENDPOINT}`,
    });
    return response.data.references;
}
exports.getAllPins = getAllPins;
