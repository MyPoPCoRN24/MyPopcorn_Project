"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = exports.upload = void 0;
const bytes_1 = require("../utils/bytes");
const headers_1 = require("../utils/headers");
const http_1 = require("../utils/http");
const endpoint = 'chunks';
/**
 * Upload chunk to a Bee node
 *
 * The chunk data consists of 8 byte span and up to 4096 bytes of payload data.
 * The span stores the length of the payload in uint64 little endian encoding.
 * Upload expects the chuck data to be set accordingly.
 *
 * @param requestOptions Options for making requests
 * @param data    Chunk data to be uploaded
 * @param postageBatchId  Postage BatchId that will be assigned to uploaded data
 * @param options Additional options like tag, encryption, pinning
 */
async function upload(requestOptions, data, postageBatchId, options) {
    const response = await (0, http_1.http)(requestOptions, {
        method: 'post',
        url: `${endpoint}`,
        data,
        headers: {
            'content-type': 'application/octet-stream',
            ...(0, headers_1.extractUploadHeaders)(postageBatchId, options),
        },
        responseType: 'json',
    });
    return response.data.reference;
}
exports.upload = upload;
/**
 * Download chunk data as a byte array
 *
 * @param requestOptions Options for making requests
 * @param hash Bee content reference
 *
 */
async function download(requestOptions, hash) {
    const response = await (0, http_1.http)(requestOptions, {
        responseType: 'arraybuffer',
        url: `${endpoint}/${hash}`,
    });
    return (0, bytes_1.wrapBytesWithHelpers)(new Uint8Array(response.data));
}
exports.download = download;
