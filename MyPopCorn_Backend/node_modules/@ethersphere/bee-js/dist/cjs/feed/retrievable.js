"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.areAllSequentialFeedsUpdateRetrievable = void 0;
const cafe_utility_1 = require("cafe-utility");
const hex_1 = require("../utils/hex");
const index_1 = require("./index");
function makeNumericIndex(index) {
    if (index instanceof Uint8Array) {
        return cafe_utility_1.Binary.uint64BEToNumber(index);
    }
    if (typeof index === 'string') {
        return parseInt(index);
    }
    if (typeof index === 'number') {
        return index;
    }
    throw new TypeError('Unknown type of index!');
}
/**
 * Function that checks if a chunk is retrievable by actually downloading it.
 * The /stewardship/{reference} endpoint does not support verification of chunks, but only manifest's references.
 *
 * @param bee
 * @param ref
 * @param options
 */
async function isChunkRetrievable(bee, ref, requestOptions) {
    try {
        await bee.downloadChunk(ref, requestOptions);
        return true;
    }
    catch (e) {
        if (e?.response?.status === 404) {
            return false;
        }
        throw e;
    }
}
/**
 * Creates array of references for all sequence updates chunk up to the given index.
 *
 * @param owner
 * @param topic
 * @param index
 */
function getAllSequenceUpdateReferences(owner, topic, index) {
    const numIndex = makeNumericIndex(index);
    const updateReferences = new Array(numIndex + 1);
    for (let i = 0; i <= numIndex; i++) {
        updateReferences[i] = (0, hex_1.bytesToHex)((0, index_1.getFeedUpdateChunkReference)(owner, topic, i));
    }
    return updateReferences;
}
async function areAllSequentialFeedsUpdateRetrievable(bee, owner, topic, index, requestOptions) {
    const chunkRetrievablePromises = getAllSequenceUpdateReferences(owner, topic, index).map(async (ref) => isChunkRetrievable(bee, ref, requestOptions));
    return (await Promise.all(chunkRetrievablePromises)).every(result => result);
}
exports.areAllSequentialFeedsUpdateRetrievable = areAllSequentialFeedsUpdateRetrievable;
